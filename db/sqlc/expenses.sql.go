// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: expenses.sql

package db

import (
	"context"
	"time"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (user_id, category_id, amount, description, date) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING id, user_id, category_id, amount, description, date, created_at
`

type CreateExpenseParams struct {
	UserID      int64     `json:"user_id"`
	CategoryID  int64     `json:"category_id"`
	Amount      float32   `json:"amount"`
	Description string    `json:"description"`
	Date        time.Time `json:"date"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense,
		arg.UserID,
		arg.CategoryID,
		arg.Amount,
		arg.Description,
		arg.Date,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Amount,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}

const getExpense = `-- name: GetExpense :one
SELECT id, user_id, category_id, amount, description, date, created_at FROM expenses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExpense(ctx context.Context, id int64) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Amount,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}
